create or replace view NNGDS_REPORTING.BCON_LKP.V_COST_REVENUE_MTD(
        MONTH_END_DATE,
        LATEST_DATE_IN_MONTH,
        CUSTOMER_ID,
        GROUP_CATEGORY,
        BILLING_GRP_ID,
        COST_GRP_ID,
        SUPPLIER,
        CUSTOMER_NAME_BILLING,
        COUNTRY_NAME,
        COUNTRY_CODE,
        ISO2_COUNTRY_CODE,
        TOTAL_TRANS,
        TDR_TYPE,
        OSR_TYPE,
        DUP_SUPPLIER_FLG,
        REV_PER_QUERY,
        REV_PER_QUERY_USD,
        ESTIMATED_REVENUE,
        ESTIMATED_REVENUE_USD,
        ESTIMATED_COST,
        ESTIMATED_COST_USD,
        COST_EXG_RATE,
        REV_EXG_RATE,
        COST_CURRENCY,
        REV_CURRENCY,
        SERVICE_TYPE,
        ITEM
) as 
 
WITH CTE_TDR_ALL AS (
 
SELECT  CUSTOMER_ID, 
        CUSTOMER_NAME_BILLING,
        TDR_TYPE,
        MONTH_END_DATE,
        DATE,
        COUNTRY_NAME,
        COUNTRY_CODE,
        ISO2_COUNTRY_CODE,
        NNID,
        SYSTEM,
        DATA_SOURCE,
        SOURCE_IP_CLEAN,
        MCC_MNC,
        RESPONSE, 
        CASE WHEN REFUSED_COUNT > 0 THEN 'REFUSED' ELSE 'INCLUDE' END AS RECORD_INCLUDE_EXCLUDE,
        SUM(TOTAL_LATENCY_MICROSEC) AS TOTAL_LATENCY_MICROSEC,
        SUM(TOTAL_LATENCY_COUNT) AS TOTAL_LATENCY_COUNT,
        SUM(QUERY_VOLUME) AS QUERY_VOLUME 
 
FROM (
      
SELECT  CUSTOMER_ID,
        CUSTOMER_NAME_BILLING,
        CUSTOMER_NAME_TDR, 
        TDR_TYPE,
        MONTH_END_DATE,
        DATE,
        COUNTRY_NAME,
        COUNTRY_CODE,
        ISO2_COUNTRY_CODE,
        NNID,
        SYSTEM,
        DATA_SOURCE,
        SOURCE_IP_CLEAN,
        MCC_MNC,
        RESPONSE, 
        TOTAL_LATENCY_MICROSEC, 
        TOTAL_LATENCY_COUNT, 
        QUERY_VOLUME,
        SUM(CASE WHEN RECORD_INCLUDE_EXCLUDE = 'EXCLUDE' THEN 1 ELSE 0 END) AS EXCLUDE_COUNT,
        SUM(CASE WHEN RECORD_INCLUDE_EXCLUDE = 'REFUSED' THEN 1 ELSE 0 END) AS REFUSED_COUNT
      
      
      FROM 
      
      (
      
        SELECT  CLKP1.CUSTOMER_ID,
                CLKP1.CUSTOMER_NAME_BILLING,
                T.CUSTOMER_NAME_TDR, 
                T.TDR_TYPE,
                T.MONTH_END_DATE,
                T.DATE,
                T.COUNTRY_NAME,
                T.COUNTRY_CODE,
                T.ISO2_COUNTRY_CODE,
                T.NNID,
                T.SYSTEM,
                T.DATA_SOURCE,
                T.SOURCE_IP_CLEAN,
                T.MCC_MNC,
                T.RESPONSE, 
                T.TOTAL_LATENCY_MICROSEC, 
                T.TOTAL_LATENCY_COUNT, 
                T.QUERY_VOLUME,
                
                COALESCE(
                
                CASE WHEN 
                  ( CASE WHEN CUSTIN.CUSTOMER_NAME_TDR IS NOT NULL THEN 1 ELSE 0 END + 
                    CASE WHEN CUSTIN.TDR_TYPE          IS NOT NULL THEN 1 ELSE 0 END + 
                    CASE WHEN CUSTIN.RESPONSE          IS NOT NULL THEN 1 ELSE 0 END + 
                    CASE WHEN CUSTIN.ISO2_COUNTRY_CODE IS NOT NULL THEN 1 ELSE 0 END + 
                    CASE WHEN CUSTIN.SYSTEM            IS NOT NULL THEN 1 ELSE 0 END + 
                    CASE WHEN CUSTIN.DATA_SOURCE       IS NOT NULL THEN 1 ELSE 0 END + 
                    CASE WHEN CUSTIN.NNID              IS NOT NULL THEN 1 ELSE 0 END +                 
                    CASE WHEN CUSTIN.QUERY_START_DATE  IS NOT NULL AND CUSTIN.QUERY_END_DATE IS NOT NULL THEN 1 ELSE 0 END ) > 0 
                AND 
                  ( CASE WHEN CUSTIN.CUSTOMER_NAME_TDR IS NOT NULL THEN 1 ELSE 0 END + 
                    CASE WHEN CUSTIN.TDR_TYPE          IS NOT NULL THEN 1 ELSE 0 END + 
                    CASE WHEN CUSTIN.RESPONSE          IS NOT NULL THEN 1 ELSE 0 END + 
                    CASE WHEN CUSTIN.ISO2_COUNTRY_CODE IS NOT NULL THEN 1 ELSE 0 END + 
                    CASE WHEN CUSTIN.SYSTEM            IS NOT NULL THEN 1 ELSE 0 END + 
                    CASE WHEN CUSTIN.DATA_SOURCE       IS NOT NULL THEN 1 ELSE 0 END + 
                    CASE WHEN CUSTIN.NNID              IS NOT NULL THEN 1 ELSE 0 END +                 
                    CASE WHEN CUSTIN.QUERY_START_DATE  IS NOT NULL AND CUSTIN.QUERY_END_DATE IS NOT NULL THEN 1 ELSE 0 END )
                =
                  ( CASE WHEN CUSTIN.CUSTOMER_NAME_TDR IS NOT NULL THEN 1 ELSE 0 END + 
                    CASE WHEN CUSTIN.TDR_TYPE           IS NOT NULL AND CUSTIN.TDR_TYPE = T.TDR_TYPE THEN 1 ELSE 0 END + 
                    CASE WHEN CUSTIN.RESPONSE           IS NOT NULL AND CUSTIN.RESPONSE = T.RESPONSE THEN 1 ELSE 0 END + 
                    CASE WHEN CUSTIN.ISO2_COUNTRY_CODE  IS NOT NULL AND CUSTIN.ISO2_COUNTRY_CODE = T.ISO2_COUNTRY_CODE THEN 1 ELSE 0 END + 
                    CASE WHEN CUSTIN.SYSTEM             IS NOT NULL AND CUSTIN.SYSTEM = T.SYSTEM THEN 1 ELSE 0 END + 
                    CASE WHEN CUSTIN.DATA_SOURCE        IS NOT NULL AND CUSTIN.DATA_SOURCE = T.DATA_SOURCE THEN 1 ELSE 0 END + 
                    CASE WHEN CUSTIN.NNID               IS NOT NULL AND CUSTIN.NNID = T.NNID  THEN 1 ELSE 0 END +                 
                    CASE WHEN CUSTIN.QUERY_START_DATE   IS NOT NULL AND CUSTIN.QUERY_END_DATE IS NOT NULL AND T.DATE >= CUSTIN.QUERY_START_DATE AND T.DATE <= CUSTIN.QUERY_END_DATE THEN 1 ELSE 0 END) 
                    
                THEN UPPER(CUSTIN.INCLUDE_EXCLUDE) END, 
                
                CASE WHEN 
                  ( CASE WHEN CUSTEX.CUSTOMER_NAME_TDR IS NOT NULL THEN 1 ELSE 0 END + 
                    CASE WHEN CUSTEX.TDR_TYPE          IS NOT NULL THEN 1 ELSE 0 END + 
                    CASE WHEN CUSTEX.RESPONSE          IS NOT NULL THEN 1 ELSE 0 END + 
                    CASE WHEN CUSTEX.ISO2_COUNTRY_CODE IS NOT NULL THEN 1 ELSE 0 END + 
                    CASE WHEN CUSTEX.SYSTEM            IS NOT NULL THEN 1 ELSE 0 END + 
                    CASE WHEN CUSTEX.DATA_SOURCE       IS NOT NULL THEN 1 ELSE 0 END + 
                    CASE WHEN CUSTEX.NNID              IS NOT NULL THEN 1 ELSE 0 END +                 
                    CASE WHEN CUSTEX.QUERY_START_DATE  IS NOT NULL AND CUSTEX.QUERY_END_DATE IS NOT NULL THEN 1 ELSE 0 END ) > 0 
                AND 
                  ( CASE WHEN CUSTEX.CUSTOMER_NAME_TDR IS NOT NULL THEN 1 ELSE 0 END + 
                    CASE WHEN CUSTEX.TDR_TYPE          IS NOT NULL THEN 1 ELSE 0 END + 
                    CASE WHEN CUSTEX.RESPONSE          IS NOT NULL THEN 1 ELSE 0 END + 
                    CASE WHEN CUSTEX.ISO2_COUNTRY_CODE IS NOT NULL THEN 1 ELSE 0 END + 
                    CASE WHEN CUSTEX.SYSTEM            IS NOT NULL THEN 1 ELSE 0 END + 
                    CASE WHEN CUSTEX.DATA_SOURCE       IS NOT NULL THEN 1 ELSE 0 END + 
                    CASE WHEN CUSTEX.NNID              IS NOT NULL THEN 1 ELSE 0 END +                 
                    CASE WHEN CUSTEX.QUERY_START_DATE  IS NOT NULL AND CUSTEX.QUERY_END_DATE IS NOT NULL THEN 1 ELSE 0 END )
                =
                  ( CASE WHEN CUSTEX.CUSTOMER_NAME_TDR IS NOT NULL THEN 1 ELSE 0 END + 
                    CASE WHEN CUSTEX.TDR_TYPE           IS NOT NULL AND CUSTEX.TDR_TYPE = T.TDR_TYPE THEN 1 ELSE 0 END + 
                    CASE WHEN CUSTEX.RESPONSE           IS NOT NULL AND CUSTEX.RESPONSE = T.RESPONSE THEN 1 ELSE 0 END + 
                    CASE WHEN CUSTEX.ISO2_COUNTRY_CODE  IS NOT NULL AND CUSTEX.ISO2_COUNTRY_CODE = T.ISO2_COUNTRY_CODE THEN 1 ELSE 0 END + 
                    CASE WHEN CUSTEX.SYSTEM             IS NOT NULL AND CUSTEX.SYSTEM = T.SYSTEM THEN 1 ELSE 0 END + 
                    CASE WHEN CUSTEX.DATA_SOURCE        IS NOT NULL AND CUSTEX.DATA_SOURCE = T.DATA_SOURCE THEN 1 ELSE 0 END + 
                    CASE WHEN CUSTEX.NNID               IS NOT NULL AND CUSTEX.NNID = T.NNID  THEN 1 ELSE 0 END +                 
                    CASE WHEN CUSTEX.QUERY_START_DATE   IS NOT NULL AND CUSTEX.QUERY_END_DATE IS NOT NULL AND T.DATE >= CUSTEX.QUERY_START_DATE AND T.DATE <= CUSTEX.QUERY_END_DATE THEN 1 ELSE 0 END) 
                    
                THEN UPPER(CUSTEX.INCLUDE_EXCLUDE) END, UPPER(EX1.INCLUDE_EXCLUDE), UPPER(EX2.INCLUDE_EXCLUDE), 'INCLUDE') 
                
                AS RECORD_INCLUDE_EXCLUDE
      
                
                FROM (SELECT * FROM NNGDS_REPORTING.TDR_TPR.V_TDR_DAILY WHERE LAST_DAY(DATE) = LAST_DAY(CURRENT_DATE()) AND DATE < CURRENT_DATE()) T 
                
 
                LEFT JOIN  "NNGDS_REPORTING"."RATINGS_ENGINE_TPR"."BILLING_INCLUDE_EXCLUDE_LKP" EX1 -- 1,491,157
                ON EX1.TDR_TYPE = T.TDR_TYPE 
                AND EX1.TDR_TYPE IS NOT NULL AND EX1.CUSTOMER_NAME_TDR IS NULL 
      
 
                LEFT JOIN  "NNGDS_REPORTING"."RATINGS_ENGINE_TPR"."BILLING_INCLUDE_EXCLUDE_LKP" EX2 -- 1,491,157
                ON EX2.RESPONSE = T.RESPONSE
                AND EX2.RESPONSE IS NOT NULL AND EX2.CUSTOMER_NAME_TDR IS NULL 
      
 
                LEFT JOIN  "NNGDS_REPORTING"."RATINGS_ENGINE_TPR"."BILLING_INCLUDE_EXCLUDE_LKP" CUSTEX
                ON CUSTEX.CUSTOMER_NAME_TDR = T.CUSTOMER_NAME_TDR 
                AND CUSTEX.CUSTOMER_NAME_TDR IS NOT NULL AND UPPER(CUSTEX.INCLUDE_EXCLUDE) = 'EXCLUDE'
      
 
                LEFT JOIN  "NNGDS_REPORTING"."RATINGS_ENGINE_TPR"."BILLING_INCLUDE_EXCLUDE_LKP" CUSTIN
                ON   CUSTIN.CUSTOMER_NAME_TDR = T.CUSTOMER_NAME_TDR 
                AND  CUSTIN.CUSTOMER_NAME_TDR IS NOT NULL AND UPPER(CUSTIN.INCLUDE_EXCLUDE) = 'INCLUDE'
 
                --JOIN TO CUSTOMER NAME MAPPING TO GET UNIFORM CUSTOMER ID
                INNER  JOIN  "NNGDS_REPORTING"."RATINGS_ENGINE_TPR"."CUSTOMER_MAPPING_LKP" CLKP1
                ON T.CUSTOMER_NAME_TDR = CLKP1.CUSTOMER_NAME_TDR
      
  ) 
  
  GROUP BY CUSTOMER_ID,
        CUSTOMER_NAME_BILLING,
        CUSTOMER_NAME_TDR, 
        TDR_TYPE,
        MONTH_END_DATE,
        DATE,
        COUNTRY_NAME,
        COUNTRY_CODE,
        ISO2_COUNTRY_CODE,
        NNID,
        SYSTEM,
        DATA_SOURCE,
        SOURCE_IP_CLEAN,
        MCC_MNC,
        RESPONSE, 
        TOTAL_LATENCY_MICROSEC, 
        TOTAL_LATENCY_COUNT, 
        QUERY_VOLUME 
      
 HAVING SUM(CASE WHEN RECORD_INCLUDE_EXCLUDE = 'EXCLUDE' THEN 1 ELSE 0 END) = 0 
      
)       
      
   
 GROUP BY CUSTOMER_ID, 
        CUSTOMER_NAME_BILLING,
        TDR_TYPE,
        MONTH_END_DATE,
        DATE,
        COUNTRY_NAME,
        COUNTRY_CODE,
        ISO2_COUNTRY_CODE,
        NNID,
        SYSTEM,
        DATA_SOURCE,
        SOURCE_IP_CLEAN,
        MCC_MNC,
        RESPONSE,
        CASE WHEN REFUSED_COUNT > 0 THEN 'REFUSED' ELSE 'INCLUDE' END 
  )
,
 
 
CTE_RE_INPUT AS (
  
 SELECT    
  CUSTOMER_ID,
  CUSTOMER_NAME_BILLING,
  COUNTRY_NAME,
  COUNTRY_CODE,
  T1.ISO2_COUNTRY_CODE,
  MONTH_END_DATE,
  TDR_TYPE,
  OSR_TYPE,
  DATA_SOURCE,
  RESPONSE,
  DATE,
  GROUP_CATEGORY, 
  ITEM, 
  T1.START_DATE, 
  T1.END_DATE, 
  TRANS_COUNT, 
  BILLING_GRP_ID, 
  T1.SUPPLIER,
  T1.SERVICE_TYPE, 
  DUP_SUPPLIER_FLG, 
  COALESCE(CG1.COST_GRP_ID,  CG2.COST_GRP_ID) AS COST_GRP_ID,
  COALESCE(CG1.EXTERNAL_SOURCE_ID, CG2.EXTERNAL_SOURCE_ID) AS EXTERNAL_SOURCE_ID,
  COALESCE(CG1.START_DATE, CG2.START_DATE) AS CG_START_DATE, 
  COALESCE(CG1.END_DATE, CG2.END_DATE) AS CG_END_DATE
  
  FROM (
  
 SELECT 
  DISTINCT 
  CUSTOMER_ID,
  CUSTOMER_NAME_BILLING,
  COUNTRY_NAME,
  COUNTRY_CODE,
  ISO2_COUNTRY_CODE,
  MONTH_END_DATE,
  TDR_TYPE,
  OSR_TYPE,
  DATA_SOURCE,
  RESPONSE,
  DATE,
  GROUP_CATEGORY, 
  ITEM, 
  START_DATE, 
  END_DATE, 
  TRANS_COUNT, 
  BILLING_GRP_ID, 
  CASE WHEN ROWTOTAL <5  THEN NULL ELSE  DS_SUPPLIER END AS SUPPLIER, 
  CASE WHEN ROWTOTAL <5  THEN NULL ELSE  DS_SERVICE_TYPE END AS SERVICE_TYPE,
  CASE WHEN ROWTOTAL <5  THEN NULL ELSE  DS_DUPLICATE_FLAG END AS DUP_SUPPLIER_FLG
  
  FROM (
     SELECT 
           MAX(CASE WHEN  DATASOURCE_MATCH != 'NO MATCH' THEN 1 ELSE 0 END + CASE WHEN RESPONSE_MATCH != 'NO MATCH' THEN 1 ELSE 0 END + CASE WHEN  FORMAT_MATCH != 'NO MATCH' THEN 1 ELSE 0 END 
           + CASE WHEN CC_MATCH != 'NO MATCH' THEN 1 ELSE 0 END + CASE WHEN  ISO2_MATCH != 'NO MATCH'  THEN 1 ELSE 0 END) OVER(PARTITION BY DATE, TDR_TYPE, DATA_SOURCE, RESPONSE, COUNTRY_CODE, ISO2_COUNTRY_CODE)
        AS ROWTOTAL,
        * 
    FROM (
  SELECT 
 'DATASOURCE:'||NVL(DS.DATA_SOURCE,'@')||'RESPONSE:'||NVL(DS.RESPONSE,'@')||'FORMAT:'||NVL(DS.TDR_FORMAT,'@')||'CC:'||NVL(DS.COUNTRY_CODE,'@')||'ISO2:'||NVL(DS.ISO2_COUNTRY_CODE,'@') AS JOINKEY,
 
  CASE 
      WHEN NOT CONTAINS('DATASOURCE:'||NVL(DS.DATA_SOURCE,'@')||'RESPONSE:'||NVL(DS.RESPONSE,'@')||'FORMAT:'||NVL(DS.TDR_FORMAT,'@')||'CC:'||NVL(DS.COUNTRY_CODE,'@')||'ISO2:'||NVL(DS.ISO2_COUNTRY_CODE,'@'),'DATASOURCE:@') 
      THEN CASE WHEN T0.DATA_SOURCE = DS.DATA_SOURCE THEN 'MATCH'
                ELSE 'NO MATCH'
           END 
      WHEN CONTAINS('DATASOURCE:'||NVL(DS.DATA_SOURCE,'@')||'RESPONSE:'||NVL(DS.RESPONSE,'@')||'FORMAT:'||NVL(DS.TDR_FORMAT,'@')||'CC:'||NVL(DS.COUNTRY_CODE,'@')||'ISO2:'||NVL(DS.ISO2_COUNTRY_CODE,'@'),'DATASOURCE:@') 
           THEN 'NO VALUE'
   END AS DATASOURCE_MATCH,
   CASE 
      WHEN NOT CONTAINS('DATASOURCE:'||NVL(DS.DATA_SOURCE,'@')||'RESPONSE:'||NVL(DS.RESPONSE,'@')||'FORMAT:'||NVL(DS.TDR_FORMAT,'@')||'CC:'||NVL(DS.COUNTRY_CODE,'@')||'ISO2:'||NVL(DS.ISO2_COUNTRY_CODE,'@'),'RESPONSE:@') 
      THEN CASE WHEN T0.RESPONSE = DS.RESPONSE THEN 'MATCH'
                ELSE 'NO MATCH'
           END 
      WHEN CONTAINS('DATASOURCE:'||NVL(DS.DATA_SOURCE,'@')||'RESPONSE:'||NVL(DS.RESPONSE,'@')||'FORMAT:'||NVL(DS.TDR_FORMAT,'@')||'CC:'||NVL(DS.COUNTRY_CODE,'@')||'ISO2:'||NVL(DS.ISO2_COUNTRY_CODE,'@'),'RESPONSE:@') 
           THEN 'NO VALUE'
   END AS RESPONSE_MATCH,
 
    CASE 
      WHEN NOT CONTAINS('RESPONSE:'||NVL(DS.DATA_SOURCE,'@')||'RESPONSE:'||NVL(DS.RESPONSE,'@')||'FORMAT:'||NVL(DS.TDR_FORMAT,'@')||'CC:'||NVL(DS.COUNTRY_CODE,'@')||'ISO2:'||NVL(DS.ISO2_COUNTRY_CODE,'@'),'FORMAT:@') 
      THEN CASE WHEN T0.TDR_TYPE = DS.TDR_FORMAT THEN 'MATCH'
                ELSE 'NO MATCH'
           END 
      WHEN CONTAINS('RESPONSE:'||NVL(DS.DATA_SOURCE,'@')||'RESPONSE:'||NVL(DS.RESPONSE,'@')||'FORMAT:'||NVL(DS.TDR_FORMAT,'@')||'CC:'||NVL(DS.COUNTRY_CODE,'@')||'ISO2:'||NVL(DS.ISO2_COUNTRY_CODE,'@'),'FORMAT:@') 
           THEN 'NO VALUE'
   END AS FORMAT_MATCH,
   CASE 
      WHEN NOT CONTAINS('RESPONSE:'||NVL(DS.DATA_SOURCE,'@')||'RESPONSE:'||NVL(DS.RESPONSE,'@')||'FORMAT:'||NVL(DS.TDR_FORMAT,'@')||'CC:'||NVL(DS.COUNTRY_CODE,'@')||'ISO2:'||NVL(DS.ISO2_COUNTRY_CODE,'@'),'CC:@') 
      THEN CASE WHEN T0.COUNTRY_CODE = DS.COUNTRY_CODE THEN 'MATCH'
                ELSE 'NO MATCH'
           END 
      WHEN CONTAINS('RESPONSE:'||NVL(DS.DATA_SOURCE,'@')||'RESPONSE:'||NVL(DS.RESPONSE,'@')||'FORMAT:'||NVL(DS.TDR_FORMAT,'@')||'CC:'||NVL(DS.COUNTRY_CODE,'@')||'ISO2:'||NVL(DS.ISO2_COUNTRY_CODE,'@'),'CC:@') 
           THEN 'NO VALUE'
   END AS CC_MATCH,
   CASE 
     WHEN NOT CONTAINS('RESPONSE:'||NVL(DS.DATA_SOURCE,'@')||'RESPONSE:'||NVL(DS.RESPONSE,'@')||'FORMAT:'||NVL(DS.TDR_FORMAT,'@')||'CC:'||NVL(DS.COUNTRY_CODE,'@')||'ISO2:'||NVL(DS.ISO2_COUNTRY_CODE,'@'),'ISO2:@') 
     THEN CASE WHEN T0.ISO2_COUNTRY_CODE = DS.ISO2_COUNTRY_CODE THEN 'MATCH'
                ELSE 'NO MATCH'
           END 
      WHEN CONTAINS('RESPONSE:'||NVL(DS.DATA_SOURCE,'@')||'RESPONSE:'||NVL(DS.RESPONSE,'@')||'FORMAT:'||NVL(DS.TDR_FORMAT,'@')||'CC:'||NVL(DS.COUNTRY_CODE,'@')||'ISO2:'||NVL(DS.ISO2_COUNTRY_CODE,'@'),'ISO2:@') 
           THEN 'NO VALUE'
   END AS ISO2_MATCH, 
   T0.CUSTOMER_ID,
   T0.CUSTOMER_NAME_BILLING,
   T0.COUNTRY_NAME,
   T0.COUNTRY_CODE,
   T0.ISO2_COUNTRY_CODE,
   T0.MONTH_END_DATE,
   T0.TDR_TYPE,
   T0.OSR_TYPE,
   T0.DATA_SOURCE,
   T0.RESPONSE,
   T0.DATE,
   COALESCE(BG3.GROUP_CATEGORY,BG2.GROUP_CATEGORY,BG1.GROUP_CATEGORY,BG0.GROUP_CATEGORY, BG4.GROUP_CATEGORY) AS GROUP_CATEGORY,
   COALESCE(BG2.ITEM,BG3.ITEM,BG1.ITEM,BG0.ITEM, BG4.ITEM) AS ITEM,
   COALESCE(BG3.START_DATE,BG2.START_DATE,BG1.START_DATE,BG0.START_DATE, BG4.START_DATE) AS START_DATE, 
   COALESCE(BG3.END_DATE,BG2.END_DATE,BG1.END_DATE,BG0.END_DATE, BG4.END_DATE) AS END_DATE, 
   T0.QUERY_VOLUME AS TRANS_COUNT,
   COALESCE(CASE WHEN T0.RECORD_INCLUDE_EXCLUDE = 'REFUSED' THEN -2 END, BG3.BILLING_GRP_ID, BG2.BILLING_GRP_ID, BG1.BILLING_GRP_ID, BG0.BILLING_GRP_ID, BG4.BILLING_GRP_ID) AS BILLING_GRP_ID,
   DS.START_DATE AS DS_START_DATE, 
   DS.END_DATE AS DS_END_DATE, 
   DS.SUPPLIER AS DS_SUPPLIER,
   DS.SERVICE_TYPE AS DS_SERVICE_TYPE, 
   DS.NETSUITE_ID AS DS_NETSUITE_ID, 
   DS.DATA_SOURCE AS DS_DATA_SOURCE,
   DS.RESPONSE AS DS_RESPONSE, 
   DS.TDR_FORMAT AS DS_TDR_FORMAT, 
   DS.COUNTRY_CODE AS DS_COUNTRY_CODE, 
   DS.ISO2_COUNTRY_CODE AS DS_ISO2_COUNTRY_CODE, 
   DS.DUPLICATE_FLAG AS DS_DUPLICATE_FLAG 
 
 
FROM
(    
           --GROUP/TOTAL QUERIES FROM DAILY TDRS BY MONTH   
              SELECT
                 DATE,
                 CUSTOMER_ID,
                 CUSTOMER_NAME_BILLING,
                 COUNTRY_NAME,
                 COUNTRY_CODE,
                 ISO2_COUNTRY_CODE,
                 MONTH_END_DATE,
                 TDR_TYPE,
                 NULL AS OSR_TYPE,
                 DATA_SOURCE,
                 RESPONSE,
                 RECORD_INCLUDE_EXCLUDE,
                 SUM(QUERY_VOLUME) AS QUERY_VOLUME
 
              FROM
                CTE_TDR_ALL
               GROUP BY
                 DATE,
                 CUSTOMER_ID,
                 CUSTOMER_NAME_BILLING,
                 COUNTRY_NAME,
                 COUNTRY_CODE,
                 ISO2_COUNTRY_CODE,
                 MONTH_END_DATE,
                 TDR_TYPE,
                 NULL,
                 DATA_SOURCE,
                 RESPONSE,
                 RECORD_INCLUDE_EXCLUDE
 
              UNION ALL
           
              --UNION TO TITAN6 (ALREADY AT MONTH GRAIN)
              SELECT
                 MONTH_END_DATE AS DATE, 
                 CUSTOMER_ID,
                 CUSTOMER_NAME_BILLING,
                 COUNTRY_NAME,
                 COUNTRY_CODE,
                 ISO2_COUNTRY_CODE,
                 MONTH_END_DATE,
                 TDR_TYPE,
                 NULL AS OSR_TYPE,
                 DATA_SOURCE,
                 RESPONSE,
                 RECORD_INCLUDE_EXCLUDE, 
                 QUERY_VOLUME 
           
              FROM
                 "NNGDS_REPORTING"."TTN6_TPR"."V_TITAN6_CURRENT"
              
           
              UNION ALL
           
             --UNION TO OSR (ALREADY AT MONTH GRAIN)
              SELECT
                 MONTH_END_DATE AS DATE, 
                 CUSTOMER_ID,
                 CUSTOMER_NAME_BILLING,
                 NULL AS COUNTRY_NAME,
                 COUNTRY_CODE,
                 NULL AS ISO2_COUNTRY_CODE,
                 MONTH_END_DATE,
                 TDR_TYPE,
                 OSR_TYPE,
                 NULL AS DATA_SOURCE,
                 NULL AS RESPONSE,
                 RECORD_INCLUDE_EXCLUDE,
                 QUERY_VOLUME 
              FROM
                 "NNGDS_REPORTING"."OSR_TPR"."V_OSR_CURRENT" 
    
    ) T0
           
     //COUNTRY CODE 1
   LEFT JOIN
      "NNGDS_REPORTING"."RATINGS_ENGINE_TPR"."REVENUE_BILLING_GRP_LKP" BG0
      ON T0.CUSTOMER_ID = BG0.CUSTOMER_ID 
      AND T0.DATE >= BG0.START_DATE AND T0.DATE <= BG0.END_DATE
      AND T0.COUNTRY_CODE = BG0.COUNTRY_CODE 
      AND BG0.TDR_FORMAT IS NULL 
      AND BG0.COUNTRY_CODE IS NOT NULL       
      AND BG0.BILLING_GRP_ID > -3 
  
   //SPECIFIC COUNTRY LISTS (ISO2)
   LEFT JOIN
      "NNGDS_REPORTING"."RATINGS_ENGINE_TPR"."REVENUE_BILLING_GRP_LKP" BG1
      ON T0.CUSTOMER_ID = BG1.CUSTOMER_ID 
      AND T0.DATE >= BG1.START_DATE AND T0.DATE <= BG1.END_DATE
      AND T0.ISO2_COUNTRY_CODE = BG1.ISO2_COUNTRY_CODE 
      AND BG1.ISO2_COUNTRY_CODE IS NOT NULL 
      AND BG1.BILLING_GRP_ID > -3 
  
  // JOIN ON TDR_TYPE - GROUP PORT HISTORY AND OSR 
   LEFT JOIN
      "NNGDS_REPORTING"."RATINGS_ENGINE_TPR"."REVENUE_BILLING_GRP_LKP" BG2
      ON T0.CUSTOMER_ID = BG2.CUSTOMER_ID 
      AND T0.TDR_TYPE = BG2.TDR_FORMAT AND NVL(T0.OSR_TYPE, 'N/A') = NVL(BG2.OSR_TYPE, 'N/A') 
      AND T0.DATE >= BG2.START_DATE AND T0.DATE <= BG2.END_DATE 
      AND BG2.TDR_FORMAT IS NOT NULL 
      AND BG2.BILLING_GRP_ID > -3 
      
  // JOIN ON DATA SOURCE TO IDENTIFY GLOBAL BLOCK 
   LEFT JOIN
      "NNGDS_REPORTING"."RATINGS_ENGINE_TPR"."REVENUE_BILLING_GRP_LKP" BG3
      ON T0.CUSTOMER_ID = BG3.CUSTOMER_ID 
      AND T0.DATA_SOURCE = BG3.DATA_SOURCE
      AND T0.DATE >= BG3.START_DATE AND T0.DATE <= BG3.END_DATE
      AND BG3.DATA_SOURCE IS NOT NULL 
      AND BG3.BILLING_GRP_ID > -3   
      
   LEFT JOIN
      "NNGDS_REPORTING"."RATINGS_ENGINE_TPR"."REVENUE_BILLING_GRP_LKP" BG4     
   ON T0.CUSTOMER_ID = BG4.CUSTOMER_ID 
   AND COALESCE(BG2.BILLING_GRP_ID, BG3.BILLING_GRP_ID, BG1.BILLING_GRP_ID, BG0.BILLING_GRP_ID, -1) = BG4.BILLING_GRP_ID
   AND T0.DATE >= BG4.START_DATE AND T0.DATE <= BG4.END_DATE
   AND BG4.BILLING_GRP_ID = -1 
    
// FIRST JOIN FOR SUPPLIER - DATA SOURCE
 CROSS JOIN "NNGDS_REPORTING"."RATINGS_ENGINE_TPR"."SUPPLIER_DATA_SOURCE_LKP" DS
   
 
 
WHERE COALESCE(CASE WHEN T0.RECORD_INCLUDE_EXCLUDE = 'REFUSED' THEN -2 END, BG2.BILLING_GRP_ID, BG3.BILLING_GRP_ID, BG1.BILLING_GRP_ID, BG0.BILLING_GRP_ID, BG4.BILLING_GRP_ID) IS NOT NULL 
  AND T0.DATE >= DS.START_DATE AND T0.DATE <= DS.END_DATE 
  ) 
)
 WHERE  (DATASOURCE_MATCH != 'NO MATCH' AND RESPONSE_MATCH != 'NO MATCH' AND FORMAT_MATCH != 'NO MATCH' AND CC_MATCH != 'NO MATCH' AND  ISO2_MATCH != 'NO MATCH') OR ROWTOTAL <5
) 
  T1
 LEFT JOIN
   "NNGDS_REPORTING"."RATINGS_ENGINE_TPR"."SUPPLIER_COST_GRP_LKP" CG1 
   ON T1.SUPPLIER = CG1.SUPPLIER 
   AND T1.DATE >= CG1.START_DATE AND DATE <= CG1.END_DATE
   AND T1.SERVICE_TYPE = CG1.SERVICE_TYPE
   AND T1.ISO2_COUNTRY_CODE =  CG1.ISO2_COUNTRY_CODE
   AND CG1.COST_GRP_ID != -1 AND CG1.ISO2_COUNTRY_CODE IS NOT NULL 
  
  LEFT JOIN 
   "NNGDS_REPORTING"."RATINGS_ENGINE_TPR"."SUPPLIER_COST_GRP_LKP" CG2
   ON  T1.SUPPLIER = CG2.SUPPLIER 
   AND T1.SERVICE_TYPE = CG2.SERVICE_TYPE
   AND CG2.COST_GRP_ID = -1 
   AND DATE >= CG2.START_DATE AND DATE <= CG2.END_DATE
 
      
) 
 
 , 
CTE_REV_RE AS (
SELECT COALESCE(MAIN.CUSTOMER_ID, REM.CUSTOMER_ID) AS CUSTOMER_ID 
      ,COALESCE(MAIN.CUSTOMER_NAME_BILLING, REM.CUSTOMER_NAME_BILLING) AS CUSTOMER_NAME_BILLING
      ,COALESCE(MAIN.BILLING_GRP_ID, REM.BILLING_GRP_ID) AS BILLING_GRP_ID
      ,COALESCE(MAIN.CUSTOMER_MINIMUM, REM.CUSTOMER_MINIMUM) AS CUSTOMER_MINIMUM
      ,COALESCE(MAIN.GROUP_CATEGORY, REM.GROUP_CATEGORY) AS GROUP_CATEGORY
      ,COALESCE(MAIN.ITEM, REM.ITEM) AS ITEM
      ,COALESCE(MAIN.MONTH_END_DATE, REM.MONTH_END_DATE) AS MONTH_END_DATE 
      ,COALESCE(MAIN.TOTAL_TRANS, REM.TOTAL_TRANS) AS TOTAL_TRANS
      ,NVL(MAIN.BILLED_AMOUNT,0) + NVL(REM.BILLED_AMOUNT,0) AS BILLED_AMOUNT 
      ,COALESCE(MAIN.SERVICE_TOTAL_BILLED, REM.SERVICE_TOTAL_BILLED) AS SERVICE_TOTAL_BILLED
      ,COALESCE(MAIN.PRICE_PER_USD, REM.PRICE_PER_USD) AS PRICE_PER_USD 
      ,NVL(MAIN.BILLED_AMOUNT_USD,0) + NVL(REM.BILLED_AMOUNT_USD,0) AS BILLED_AMOUNT_USD 
      ,COALESCE(MAIN.REV_CURRENCY, REM.REV_CURRENCY) AS REV_CURRENCY
      ,COALESCE(MAIN.COUNTRY_BREAKOUT, REM.COUNTRY_BREAKOUT) AS COUNTRY_BREAKOUT 
  
FROM (
  
SELECT T4.*, 
        CNT.COUNTRY_BREAKOUT 
  FROM (
  SELECT 
  T3.CUSTOMER_ID,
  T3.CUSTOMER_NAME_BILLING,
  T3.BILLING_GRP_ID,
  T3.CUSTOMER_MINIMUM,
  T3.GROUP_CATEGORY,
  T3.ITEM,
  T3.MONTH_END_DATE,
  T3.TOTAL_TRANS AS TOTAL_TRANS,
  CASE 
   WHEN T3.MONTHLY_MIN_VALUE > T3.ROW_LEVEL_REVENUE AND T3.MONTHLY_MIN_VALUE > 0 THEN T3.MONTHLY_MIN_VALUE
   WHEN T3.MONTHLY_MAX_VALUE < T3.ROW_LEVEL_REVENUE AND T3.MONTHLY_MAX_VALUE > 0 THEN T3.MONTHLY_MAX_VALUE
   ELSE T3.ROW_LEVEL_REVENUE
  END AS BILLED_AMOUNT, 
  SUM( CASE 
   WHEN T3.MONTHLY_MIN_VALUE > T3.ROW_LEVEL_REVENUE AND T3.MONTHLY_MIN_VALUE > 0 THEN T3.MONTHLY_MIN_VALUE
   WHEN T3.MONTHLY_MAX_VALUE < T3.ROW_LEVEL_REVENUE AND T3.MONTHLY_MAX_VALUE > 0 THEN T3.MONTHLY_MAX_VALUE
   ELSE T3.ROW_LEVEL_REVENUE END ) OVER(PARTITION BY CUSTOMER_ID, GROUP_CATEGORY, MONTH_END_DATE) AS SERVICE_TOTAL_BILLED,
  CASE WHEN T3.CURRENCY = 'USD' THEN 1 ELSE EXG.PRICE_PER_USD END AS PRICE_PER_USD, 
 (CASE 
   WHEN T3.MONTHLY_MIN_VALUE > T3.ROW_LEVEL_REVENUE AND T3.MONTHLY_MIN_VALUE > 0 THEN T3.MONTHLY_MIN_VALUE
   WHEN T3.MONTHLY_MAX_VALUE < T3.ROW_LEVEL_REVENUE AND T3.MONTHLY_MAX_VALUE > 0 THEN T3.MONTHLY_MAX_VALUE
   ELSE T3.ROW_LEVEL_REVENUE
  END)/(CASE WHEN T3.CURRENCY = 'USD' THEN 1 ELSE EXG.PRICE_PER_USD END) AS BILLED_AMOUNT_USD,
   T3.CURRENCY AS REV_CURRENCY
 
 FROM (
 (SELECT    
  T2a.CUSTOMER_ID,
  T2a.CUSTOMER_NAME_BILLING,
  T2a.CUSTOMER_MINIMUM,
  T2a.MONTH_END_DATE,
  T2a.BILLING_GRP_ID,
  SUM(T2a.TOTAL_TRANS) AS TOTAL_TRANS,
  T2a.GROUP_CATEGORY,
  T2a.ITEM,
  T2a.CURRENTFLG,
  SUM(CASE WHEN CURRENTFLG = 1 THEN T2a.MONTHLY_MIN_VALUE ELSE 0 END) AS MONTHLY_MIN_VALUE, 
  SUM(CASE WHEN CURRENTFLG = 1 THEN T2a.MONTHLY_MAX_VALUE ELSE 0 END) AS MONTHLY_MAX_VALUE, 
  SUM(T2a.ROW_LEVEL_REVENUE) AS ROW_LEVEL_REVENUE,
  T2a.CURRENCY 
 
 FROM( 
  
  SELECT
   T2.CUSTOMER_ID,
   T2.CUSTOMER_NAME_BILLING,
   T2.CUSTOMER_MINIMUM,
   T2.MONTH_END_DATE,
   T2.BILLING_GRP_ID,
   T2.TOTAL_TRANS,
   T2.GROUP_CATEGORY,
   T2.ITEM,
   T2.MONTHLY_MIN_VALUE, 
   T2.MONTHLY_MAX_VALUE, 
   ROW_NUMBER() OVER(PARTITION BY T2.CUSTOMER_ID, T2.BILLING_GRP_ID, T2.MONTH_END_DATE, RE_START_DATE ORDER BY T2.CUSTOMER_ID, T2.BILLING_GRP_ID,T2.MONTH_END_DATE,RE_START_DATE , TRANS_RANGE_MIN DESC) AS ROWNUM, 
   ROW_NUMBER() OVER(PARTITION BY T2.CUSTOMER_ID, T2.BILLING_GRP_ID, T2.MONTH_END_DATE ORDER BY T2.CUSTOMER_ID, T2.BILLING_GRP_ID,T2.MONTH_END_DATE,RE_START_DATE DESC ) AS CURRENTFLG, 
   TRANS_RANGE_MIN,         
   TRANS_RANGE_MAX,         
   PER_TRANS_VALUE,         
   TRANS_RANGE_BASE_VALUE,  
   FLAT_RATE,   
   T2.RE_START_DATE,
   T2.RE_END_DATE,
  // NON-TIERED 
  CASE 
    WHEN
       PER_TRANS_RATE_TYPE = 1 // Per query rate applied to number of queries above range minimum 
        THEN 
            (T2.TOTAL_TRANS-TRANS_RANGE_MIN)*PER_TRANS_VALUE + TRANS_RANGE_BASE_VALUE
    WHEN 
       PER_TRANS_RATE_TYPE = 2  // Per query rate applied to total query volume 
        THEN 
             T2.TOTAL_TRANS*PER_TRANS_VALUE + TRANS_RANGE_BASE_VALUE 
    WHEN 
       PER_TRANS_RATE_TYPE = 0  // No per query rate 
        THEN 
            TRANS_RANGE_BASE_VALUE + FLAT_RATE 
   WHEN
        PER_TRANS_RATE_TYPE = 3        
      THEN
        SUM(CASE
            WHEN
               T2.TOTAL_TRANS >= TRANS_RANGE_MAX 
            THEN
               (TRANS_RANGE_MAX - TRANS_RANGE_MIN)*PER_TRANS_VALUE + TRANS_RANGE_BASE_VALUE 
            WHEN
               T2.TOTAL_TRANS < TRANS_RANGE_MAX 
            THEN
               (T2.TOTAL_TRANS - TRANS_RANGE_MIN)*PER_TRANS_VALUE + TRANS_RANGE_BASE_VALUE
         END
         ) OVER(PARTITION BY T2.CUSTOMER_ID, T2.BILLING_GRP_ID, T2.MONTH_END_DATE)
         
   WHEN PER_TRANS_RATE_TYPE IS NULL THEN 0 
    END AS ROW_LEVEL_REVENUE,
      CASE
            WHEN
               T2.TOTAL_TRANS >= TRANS_RANGE_MAX 
            THEN
               (TRANS_RANGE_MAX - TRANS_RANGE_MIN)
            WHEN
               T2.TOTAL_TRANS < TRANS_RANGE_MAX 
            THEN
               (T2.TOTAL_TRANS - TRANS_RANGE_MIN)
         END AS BILLED_QUERIES, 
   // TIERED 
   CASE
            WHEN
               T2.TOTAL_TRANS >= TRANS_RANGE_MAX 
            THEN
               (TRANS_RANGE_MAX - TRANS_RANGE_MIN)*PER_TRANS_VALUE + TRANS_RANGE_BASE_VALUE 
            WHEN
               T2.TOTAL_TRANS < TRANS_RANGE_MAX 
            THEN
               (T2.TOTAL_TRANS - TRANS_RANGE_MIN)*PER_TRANS_VALUE + TRANS_RANGE_BASE_VALUE
         END AS INCREMENTAL
    ,CURRENCY
    
FROM (
 SELECT        
   T1.CUSTOMER_ID,
   T1.CUSTOMER_NAME_BILLING,
   T1.MONTH_END_DATE,
   T1.BILLING_GRP_ID,
   T1.GROUP_CATEGORY,
   T1.ITEM,
   SUM(T1.TRANS_COUNT) AS TOTAL_TRANS , 
   RTG1.TRANS_RANGE_MIN,         
   RTG1.TRANS_RANGE_MAX,         
   RTG1.PER_TRANS_VALUE,         
   RTG1.TRANS_RANGE_BASE_VALUE,  
   RTG1.FLAT_RATE,               
   RTG1.CURRENCY,                
   RTG1.MONTHLY_MIN_VALUE,       
   RTG1.MONTHLY_MAX_VALUE,       
   RTG1.PER_TRANS_RATE_TYPE,
   RTG1.END_DATE AS RE_END_DATE,
   RTG1.START_DATE AS RE_START_DATE,
   RTG1.SERVICE_MINIMUM AS CUSTOMER_MINIMUM 
FROM 
    (
      
     SELECT    
        COALESCE(T0.CUSTOMER_ID,BG1.CUSTOMER_ID) AS CUSTOMER_ID,
        COALESCE(T0.CUSTOMER_NAME_BILLING,BG1.CUSTOMER_NAME_BILLING) AS CUSTOMER_NAME_BILLING,
        COALESCE(T0.DATE, BG1.MONTH_END_DATE) AS DATE, 
        COALESCE(T0.MONTH_END_DATE, BG1.MONTH_END_DATE) AS MONTH_END_DATE,
        SUM(COALESCE(T0.TRANS_COUNT,0)) AS TRANS_COUNT,
        COALESCE(T0.BILLING_GRP_ID, BG1.BILLING_GRP_ID) AS BILLING_GRP_ID,
        COALESCE(CASE WHEN T0.BILLING_GRP_ID = -2 THEN 'Refused queries' END,BG1.GROUP_CATEGORY) AS GROUP_CATEGORY,
        COALESCE(T0.ITEM, BG1.ITEM) AS ITEM
      FROM 
      CTE_RE_INPUT T0
 
    FULL JOIN 
    
    (SELECT
       BG0.CUSTOMER_ID
      ,BG0.CUSTOMER_NAME AS CUSTOMER_NAME_BILLING
      ,BG0.BILLING_GRP_ID
      ,BG0.GROUP_CATEGORY
      ,BG0.ITEM
      ,BG0.START_DATE
      ,BG0.END_DATE 
      ,DT.MONTH_END_DATE
 
     FROM 
   
     (SELECT
        CUSTOMER_ID
       ,CUSTOMER_NAME
       ,BILLING_GRP_ID
       ,START_DATE
       ,END_DATE
       ,GROUP_CATEGORY
       ,ITEM
      FROM "NNGDS_REPORTING"."RATINGS_ENGINE_TPR"."REVENUE_BILLING_GRP_LKP"
      
      GROUP BY 
        CUSTOMER_ID
      , CUSTOMER_NAME
       ,BILLING_GRP_ID
       ,START_DATE
       ,END_DATE
       ,GROUP_CATEGORY
       ,ITEM
       ) BG0
 
       CROSS JOIN 
 
       (SELECT MONTH_END_DATE
        FROM CTE_TDR_ALL 
        GROUP BY MONTH_END_DATE
        ) DT 
     
     WHERE DT.MONTH_END_DATE >= BG0.START_DATE AND DT.MONTH_END_DATE <= BG0.END_DATE
     
     ) BG1
    
    ON  T0.CUSTOMER_ID = BG1.CUSTOMER_ID 
    AND T0.BILLING_GRP_ID = BG1.BILLING_GRP_ID 
    AND T0.MONTH_END_DATE = BG1.MONTH_END_DATE
    AND T0.START_DATE = BG1.START_DATE 
 
   WHERE T0.DUP_SUPPLIER_FLG IS NULL 
      
   GROUP BY   
        COALESCE(T0.CUSTOMER_ID,BG1.CUSTOMER_ID) ,
        COALESCE(T0.CUSTOMER_NAME_BILLING,BG1.CUSTOMER_NAME_BILLING) ,
        COALESCE(T0.DATE, BG1.MONTH_END_DATE) ,
        COALESCE(T0.MONTH_END_DATE, BG1.MONTH_END_DATE) ,
        COALESCE(T0.BILLING_GRP_ID, BG1.BILLING_GRP_ID) ,
        COALESCE(CASE WHEN T0.BILLING_GRP_ID = -2 THEN 'Refused queries' END,BG1.GROUP_CATEGORY) ,
        COALESCE(T0.ITEM, BG1.ITEM)
 )
T1 
    
LEFT JOIN
   "NNGDS_REPORTING"."RATINGS_ENGINE_TPR"."REVENUE_RATING_ENGINE" RTG1 
   ON T1.CUSTOMER_ID = RTG1.CUSTOMER_ID 
   AND T1.BILLING_GRP_ID = RTG1.BILLING_GRP_ID 
   AND T1.DATE >= RTG1.START_DATE AND (T1.DATE <= RTG1.END_DATE OR RTG1.END_DATE IS NULL)
    
GROUP BY 
   T1.CUSTOMER_ID,
   T1.CUSTOMER_NAME_BILLING,
   T1.MONTH_END_DATE,
   T1.BILLING_GRP_ID,
   T1.GROUP_CATEGORY,
   T1.ITEM,
   RTG1.TRANS_RANGE_MIN,         
   RTG1.TRANS_RANGE_MAX,         
   RTG1.PER_TRANS_VALUE,         
   RTG1.TRANS_RANGE_BASE_VALUE,  
   RTG1.FLAT_RATE,               
   RTG1.CURRENCY,                
   RTG1.MONTHLY_MIN_VALUE,       
   RTG1.MONTHLY_MAX_VALUE,       
   RTG1.PER_TRANS_RATE_TYPE,
   RTG1.SERVICE_MINIMUM ,
   RTG1.END_DATE,
   RTG1.START_DATE
   
) 
  T2 
 
WHERE (PER_TRANS_RATE_TYPE IN(0,1,2) AND  (T2.TOTAL_TRANS > TRANS_RANGE_MIN OR (TRANS_RANGE_MIN = 0 AND T2.TOTAL_TRANS = 0)) 
      AND T2.TOTAL_TRANS <= TRANS_RANGE_MAX )
      
      OR (PER_TRANS_RATE_TYPE = 3 AND  (T2.TOTAL_TRANS > TRANS_RANGE_MIN OR (TRANS_RANGE_MIN = 0 AND T2.TOTAL_TRANS = 0)))
 
      OR (PER_TRANS_RATE_TYPE IS NULL AND T2.BILLING_GRP_ID = -2)
   
      QUALIFY ROWNUM = 1 
   ORDER BY MONTH_END_DATE, CUSTOMER_ID, BILLING_GRP_ID, TRANS_RANGE_MIN
)
   T2a
  
 GROUP BY 
  T2a.CUSTOMER_ID,
  T2a.CUSTOMER_NAME_BILLING,
  T2a.CUSTOMER_MINIMUM,
  T2a.MONTH_END_DATE,
  T2a.BILLING_GRP_ID,
  T2a.GROUP_CATEGORY,
  T2a.ITEM,
  T2a.CURRENTFLG,
  T2a.CURRENCY 
))
 
T3
 
LEFT JOIN "NNGDS_REPORTING"."RATINGS_ENGINE_TPR"."CURRENCY_EXCHANGE_LKP" EXG
ON T3.CURRENCY = EXG.CURRENCY_CODE AND T3.MONTH_END_DATE = LAST_DAY(EXG.DATE) 
 
 
 ORDER BY CUSTOMER_NAME_BILLING 
         ,MONTH_END_DATE
         ,BILLING_GRP_ID
) T4 
 
LEFT JOIN 
 
(SELECT CUSTOMER_ID, BILLING_GRP_ID, REPLACE(REPLACE(LISTAGG( CNT.COUNTRY_NAME||': '||CNT.COUNT, '@@') WITHIN GROUP (ORDER BY COUNT DESC), '@@', char(10)), ',', '') AS COUNTRY_BREAKOUT
FROM (
SELECT CUSTOMER_ID, BILLING_GRP_ID, COUNTRY_NAME, SUM(TRANS_COUNT) AS COUNT
FROM  CTE_RE_INPUT
WHERE DUP_SUPPLIER_FLG IS NULL
GROUP BY CUSTOMER_ID, COUNTRY_NAME, BILLING_GRP_ID
) CNT 
GROUP BY CUSTOMER_ID, BILLING_GRP_ID 
) CNT 
 
ON T4.CUSTOMER_ID = CNT.CUSTOMER_ID AND T4.BILLING_GRP_ID = CNT.BILLING_GRP_ID 
) MAIN 
 
FULL JOIN  ( 
 
 
SELECT T5.CUSTOMER_ID
, T5.CUSTOMER_NAME_BILLING
, COALESCE(R1.BILLING_GRP_ID, 0) AS BILLING_GRP_ID
, CUSTOMER_MINIMUM
, COALESCE(R1.GROUP_CATEGORY, 'Remainder') AS GROUP_CATEGORY 
, COALESCE(R1.ITEM, 'GD-Group4- QRY') AS ITEM
, MONTH_END_DATE
, 0 AS TOTAL_TRANS 
, T5.BILLED_AMOUNT 
, T5.SERVICE_TOTAL_BILLED
, T5.PRICE_PER_USD
, T5.BILLED_AMOUNT_USD 
, T5.REV_CURRENCY 
, T5.COUNTRY_BREAKOUT 
FROM ( 
SELECT T4.CUSTOMER_ID
, T4.CUSTOMER_NAME_BILLING
, CUSTOMER_MINIMUM
, MONTH_END_DATE
, CUSTOMER_MINIMUM - T4.SERVICE_TOTAL_BILLED AS BILLED_AMOUNT 
, T4.SERVICE_TOTAL_BILLED
, CASE WHEN REV_CURRENCY = 'USD' THEN 1 ELSE PRICE_PER_USD END AS PRICE_PER_USD
, (CUSTOMER_MINIMUM - T4.SERVICE_TOTAL_BILLED)/(CASE WHEN REV_CURRENCY = 'USD' THEN 1 ELSE PRICE_PER_USD END) AS BILLED_AMOUNT_USD 
, REV_CURRENCY 
, NULL AS COUNTRY_BREAKOUT 
 
FROM (
   SELECT 
   T3.CUSTOMER_ID,
   T3.CUSTOMER_NAME_BILLING,
   T3.BILLING_GRP_ID,
   T3.CUSTOMER_MINIMUM,
   T3.GROUP_CATEGORY,
   T3.ITEM,
   T3.MONTH_END_DATE,
   T3.TOTAL_TRANS,
   CASE 
    WHEN T3.MONTHLY_MIN_VALUE > T3.ROW_LEVEL_REVENUE AND T3.MONTHLY_MIN_VALUE > 0 THEN T3.MONTHLY_MIN_VALUE
    WHEN T3.MONTHLY_MAX_VALUE < T3.ROW_LEVEL_REVENUE AND T3.MONTHLY_MAX_VALUE > 0 THEN T3.MONTHLY_MAX_VALUE
    ELSE T3.ROW_LEVEL_REVENUE
   END AS BILLED_AMOUNT, 
   SUM(   CASE 
    WHEN T3.MONTHLY_MIN_VALUE > T3.ROW_LEVEL_REVENUE AND T3.MONTHLY_MIN_VALUE > 0 THEN T3.MONTHLY_MIN_VALUE
    WHEN T3.MONTHLY_MAX_VALUE < T3.ROW_LEVEL_REVENUE AND T3.MONTHLY_MAX_VALUE > 0 THEN T3.MONTHLY_MAX_VALUE
    ELSE T3.ROW_LEVEL_REVENUE END ) OVER(PARTITION BY CUSTOMER_ID, GROUP_CATEGORY, MONTH_END_DATE) AS SERVICE_TOTAL_BILLED,
    EXG.PRICE_PER_USD ,
  
  (CASE 
    WHEN T3.MONTHLY_MIN_VALUE > T3.ROW_LEVEL_REVENUE AND T3.MONTHLY_MIN_VALUE > 0 THEN T3.MONTHLY_MIN_VALUE
    WHEN T3.MONTHLY_MAX_VALUE < T3.ROW_LEVEL_REVENUE AND T3.MONTHLY_MAX_VALUE > 0 THEN T3.MONTHLY_MAX_VALUE
    ELSE T3.ROW_LEVEL_REVENUE
   END)/EXG.PRICE_PER_USD AS BILLED_AMOUNT_USD,
    T3.CURRENCY AS REV_CURRENCY
      
  FROM (
 SELECT    
  T2a.CUSTOMER_ID,
  T2a.CUSTOMER_NAME_BILLING,
  T2a.CUSTOMER_MINIMUM,
  T2a.MONTH_END_DATE,
  T2a.BILLING_GRP_ID,
  SUM(T2a.TOTAL_TRANS) AS TOTAL_TRANS,
  T2a.GROUP_CATEGORY,
  T2a.ITEM,
  T2a.CURRENTFLG,
  SUM(CASE WHEN CURRENTFLG = 1 THEN T2a.MONTHLY_MIN_VALUE ELSE 0 END) AS MONTHLY_MIN_VALUE, 
  SUM(CASE WHEN CURRENTFLG = 1 THEN T2a.MONTHLY_MAX_VALUE ELSE 0 END) AS MONTHLY_MAX_VALUE, 
  SUM(T2a.ROW_LEVEL_REVENUE) AS ROW_LEVEL_REVENUE,
  T2a.CURRENCY 
 
  FROM (
  SELECT
   T2.CUSTOMER_ID,
   T2.CUSTOMER_NAME_BILLING,
   T2.CUSTOMER_MINIMUM,
   T2.MONTH_END_DATE,
   T2.BILLING_GRP_ID,
   T2.TOTAL_TRANS,
   T2.GROUP_CATEGORY,
   T2.ITEM,
   T2.MONTHLY_MIN_VALUE, 
   T2.MONTHLY_MAX_VALUE, 
   ROW_NUMBER() OVER(PARTITION BY T2.CUSTOMER_ID, T2.BILLING_GRP_ID, T2.MONTH_END_DATE ORDER BY T2.CUSTOMER_ID, T2.BILLING_GRP_ID,T2.MONTH_END_DATE,TRANS_RANGE_MIN DESC) AS ROWNUM, 
   ROW_NUMBER() OVER(PARTITION BY T2.CUSTOMER_ID, T2.BILLING_GRP_ID, T2.MONTH_END_DATE ORDER BY T2.CUSTOMER_ID, T2.BILLING_GRP_ID,T2.MONTH_END_DATE,RE_START_DATE DESC ) AS CURRENTFLG, 
   TRANS_RANGE_MIN,         
   TRANS_RANGE_MAX,         
   PER_TRANS_VALUE,         
   TRANS_RANGE_BASE_VALUE,  
   FLAT_RATE,   
   RE_START_DATE,
   RE_END_DATE,
  // NON-TIERED 
  CASE 
    WHEN
       PER_TRANS_RATE_TYPE = 1 // Per query rate applied to number of queries above range minimum 
        THEN 
            (T2.TOTAL_TRANS-TRANS_RANGE_MIN)*PER_TRANS_VALUE + TRANS_RANGE_BASE_VALUE
    WHEN 
       PER_TRANS_RATE_TYPE = 2  // Per query rate applied to total query volume 
        THEN 
             T2.TOTAL_TRANS*PER_TRANS_VALUE + TRANS_RANGE_BASE_VALUE 
    WHEN 
       PER_TRANS_RATE_TYPE = 0  // No per query rate 
        THEN 
            TRANS_RANGE_BASE_VALUE + FLAT_RATE 
   WHEN
        PER_TRANS_RATE_TYPE = 3        
      THEN
        SUM(CASE
            WHEN
               T2.TOTAL_TRANS >= TRANS_RANGE_MAX 
            THEN
               (TRANS_RANGE_MAX - TRANS_RANGE_MIN)*PER_TRANS_VALUE + TRANS_RANGE_BASE_VALUE 
            WHEN
               T2.TOTAL_TRANS < TRANS_RANGE_MAX 
            THEN
               (T2.TOTAL_TRANS - TRANS_RANGE_MIN)*PER_TRANS_VALUE + TRANS_RANGE_BASE_VALUE
         END
         ) OVER(PARTITION BY T2.CUSTOMER_ID, T2.BILLING_GRP_ID, T2.MONTH_END_DATE)
    WHEN 
        PER_TRANS_RATE_TYPE IS NULL THEN 0 
 
    END AS ROW_LEVEL_REVENUE,
      CASE
            WHEN
               T2.TOTAL_TRANS >= TRANS_RANGE_MAX 
            THEN
               (TRANS_RANGE_MAX - TRANS_RANGE_MIN)
            WHEN
               T2.TOTAL_TRANS < TRANS_RANGE_MAX 
            THEN
               (T2.TOTAL_TRANS - TRANS_RANGE_MIN)
         END AS BILLED_QUERIES, 
   // TIERED 
   CASE
            WHEN
               T2.TOTAL_TRANS >= TRANS_RANGE_MAX 
            THEN
               (TRANS_RANGE_MAX - TRANS_RANGE_MIN)*PER_TRANS_VALUE + TRANS_RANGE_BASE_VALUE 
            WHEN
               T2.TOTAL_TRANS < TRANS_RANGE_MAX 
            THEN
               (T2.TOTAL_TRANS - TRANS_RANGE_MIN)*PER_TRANS_VALUE + TRANS_RANGE_BASE_VALUE
         END AS INCREMENTAL
    ,CURRENCY
    
FROM (
 SELECT        
   T1.CUSTOMER_ID,
   T1.CUSTOMER_NAME_BILLING,
   T1.MONTH_END_DATE,
   T1.BILLING_GRP_ID,
   T1.GROUP_CATEGORY,  
   T1.ITEM,
   SUM(T1.TRANS_COUNT) AS TOTAL_TRANS , 
   RTG1.TRANS_RANGE_MIN,         
   RTG1.TRANS_RANGE_MAX,         
   RTG1.PER_TRANS_VALUE,         
   RTG1.TRANS_RANGE_BASE_VALUE,  
   RTG1.FLAT_RATE,               
   RTG1.CURRENCY,                
   RTG1.MONTHLY_MIN_VALUE,       
   RTG1.MONTHLY_MAX_VALUE,       
   RTG1.PER_TRANS_RATE_TYPE,
   RTG1.SERVICE_MINIMUM AS CUSTOMER_MINIMUM,
   RTG1.START_DATE AS RE_START_DATE,
   RTG1.END_DATE AS RE_END_DATE
FROM 
    (
      
     SELECT    
        COALESCE(T0.CUSTOMER_ID,BG1.CUSTOMER_ID) AS CUSTOMER_ID,
        COALESCE(T0.CUSTOMER_NAME_BILLING,BG1.CUSTOMER_NAME_BILLING) AS CUSTOMER_NAME_BILLING,
        COALESCE(T0.DATE, BG1.MONTH_END_DATE) AS DATE, 
        COALESCE(T0.MONTH_END_DATE, BG1.MONTH_END_DATE) AS MONTH_END_DATE,
        SUM(COALESCE(T0.TRANS_COUNT,0)) AS TRANS_COUNT,
        COALESCE(T0.BILLING_GRP_ID, BG1.BILLING_GRP_ID) AS BILLING_GRP_ID,
        COALESCE(CASE WHEN T0.BILLING_GRP_ID = -2 THEN 'Refused queries' END,BG1.GROUP_CATEGORY) AS GROUP_CATEGORY,
        COALESCE(T0.ITEM, BG1.ITEM) AS ITEM
      FROM 
      CTE_RE_INPUT T0
 
    FULL JOIN 
    
    (SELECT
       BG0.CUSTOMER_ID
      ,BG0.CUSTOMER_NAME AS CUSTOMER_NAME_BILLING
      ,BG0.BILLING_GRP_ID
      ,BG0.GROUP_CATEGORY
      ,BG0.ITEM
      ,BG0.START_DATE
      ,BG0.END_DATE 
      ,DT.MONTH_END_DATE
 
     FROM 
   
     (SELECT
        CUSTOMER_ID
       ,LTRIM(RTRIM(CUSTOMER_NAME)) AS CUSTOMER_NAME 
       ,BILLING_GRP_ID
       ,START_DATE
       ,END_DATE
       ,GROUP_CATEGORY
       ,ITEM
      FROM "NNGDS_REPORTING"."RATINGS_ENGINE_TPR"."REVENUE_BILLING_GRP_LKP"
      
      GROUP BY 
        CUSTOMER_ID
       ,LTRIM(RTRIM(CUSTOMER_NAME))
       ,BILLING_GRP_ID
       ,START_DATE
       ,END_DATE
       ,GROUP_CATEGORY
       ,ITEM
       ) BG0
 
       CROSS JOIN 
 
       (SELECT MONTH_END_DATE
        FROM CTE_TDR_ALL 
        GROUP BY MONTH_END_DATE
        ) DT 
     
     WHERE DT.MONTH_END_DATE >= BG0.START_DATE AND DT.MONTH_END_DATE <= BG0.END_DATE
     
     ) BG1
    
    ON  T0.CUSTOMER_ID = BG1.CUSTOMER_ID 
    AND T0.BILLING_GRP_ID = BG1.BILLING_GRP_ID 
    AND T0.MONTH_END_DATE = BG1.MONTH_END_DATE
    AND T0.START_DATE = BG1.START_DATE 
   --AND T0.ITEM = BG1.ITEM
   
   WHERE T0.DUP_SUPPLIER_FLG IS NULL 
      
   GROUP BY   
        COALESCE(T0.CUSTOMER_ID,BG1.CUSTOMER_ID) ,
        COALESCE(T0.CUSTOMER_NAME_BILLING,BG1.CUSTOMER_NAME_BILLING) ,
        COALESCE(T0.DATE, BG1.MONTH_END_DATE) ,
        COALESCE(T0.MONTH_END_DATE, BG1.MONTH_END_DATE) ,
        COALESCE(T0.BILLING_GRP_ID, BG1.BILLING_GRP_ID) ,
        COALESCE( CASE WHEN T0.BILLING_GRP_ID = -2 THEN 'Refused queries' END,BG1.GROUP_CATEGORY),
        COALESCE(T0.ITEM, BG1.ITEM)
 ) T1 
    
LEFT JOIN
   "NNGDS_REPORTING"."RATINGS_ENGINE_TPR"."REVENUE_RATING_ENGINE" RTG1 
   ON T1.CUSTOMER_ID = RTG1.CUSTOMER_ID 
   AND T1.BILLING_GRP_ID = RTG1.BILLING_GRP_ID 
   AND T1.DATE >= RTG1.START_DATE AND (T1.DATE <= RTG1.END_DATE OR RTG1.END_DATE IS NULL)
    
GROUP BY 
   T1.CUSTOMER_ID,
   T1.CUSTOMER_NAME_BILLING,
   T1.MONTH_END_DATE,
   T1.BILLING_GRP_ID,
   T1.GROUP_CATEGORY,
   T1.ITEM,
   RTG1.TRANS_RANGE_MIN,         
   RTG1.TRANS_RANGE_MAX,         
   RTG1.PER_TRANS_VALUE,         
   RTG1.TRANS_RANGE_BASE_VALUE,  
   RTG1.FLAT_RATE,               
   RTG1.CURRENCY,                
   RTG1.MONTHLY_MIN_VALUE,       
   RTG1.MONTHLY_MAX_VALUE,       
   RTG1.PER_TRANS_RATE_TYPE,
   RTG1.SERVICE_MINIMUM ,
   RTG1.START_DATE,
   RTG1.END_DATE
   
 ) T2
 
 WHERE (PER_TRANS_RATE_TYPE IN(0,1,2) AND  (T2.TOTAL_TRANS > TRANS_RANGE_MIN OR (TRANS_RANGE_MIN = 0 AND T2.TOTAL_TRANS = 0)) 
       AND T2.TOTAL_TRANS <= TRANS_RANGE_MAX )      
       OR (PER_TRANS_RATE_TYPE = 3 AND  (T2.TOTAL_TRANS > TRANS_RANGE_MIN OR (TRANS_RANGE_MIN = 0 AND T2.TOTAL_TRANS = 0)))
       OR (PER_TRANS_RATE_TYPE IS NULL AND T2.BILLING_GRP_ID = -2)
    QUALIFY ROWNUM = 1
    ORDER BY MONTH_END_DATE, CUSTOMER_ID, BILLING_GRP_ID, TRANS_RANGE_MIN,  ROWNUM
 )
T2a
GROUP BY 
  T2a.CUSTOMER_ID,
  T2a.CUSTOMER_NAME_BILLING,
  T2a.CUSTOMER_MINIMUM,
  T2a.MONTH_END_DATE,
  T2a.BILLING_GRP_ID,
  T2a.GROUP_CATEGORY,
  T2a.ITEM,
  T2a.CURRENTFLG,
  T2a.CURRENCY 
)
T3
 
LEFT JOIN "NNGDS_REPORTING"."RATINGS_ENGINE_TPR"."CURRENCY_EXCHANGE_LKP" EXG
ON T3.CURRENCY = EXG.CURRENCY_CODE AND T3.MONTH_END_DATE = LAST_DAY(EXG.DATE) 
 
ORDER BY CUSTOMER_NAME_BILLING 
         ,MONTH_END_DATE
         ,BILLING_GRP_ID
) T4 
 
WHERE T4.CUSTOMER_MINIMUM > T4.SERVICE_TOTAL_BILLED AND MONTH_END_DATE IS NOT NULL 
 
GROUP BY 
    CUSTOMER_ID
  , CUSTOMER_NAME_BILLING
  , CUSTOMER_MINIMUM
  , MONTH_END_DATE
  , CUSTOMER_MINIMUM - T4.SERVICE_TOTAL_BILLED 
  , T4.SERVICE_TOTAL_BILLED
  , PRICE_PER_USD
  , (CUSTOMER_MINIMUM - T4.SERVICE_TOTAL_BILLED)/PRICE_PER_USD 
  , REV_CURRENCY 
  
) T5
 
LEFT JOIN (
SELECT DISTINCT START_DATE
        ,END_DATE 
        ,CUSTOMER_ID
        ,BILLING_GRP_ID
        ,TDR_FORMAT
        ,OSR_TYPE
        ,GROUP_CATEGORY
        ,ITEM 
FROM NNGDS_REPORTING.RATINGS_ENGINE_TPR.REVENUE_BILLING_GRP_LKP
WHERE REMAINDER_FLAG IS NOT NULL 
) R1 
 
ON T5.CUSTOMER_ID = R1.CUSTOMER_ID
AND T5.MONTH_END_DATE >= R1.START_DATE
AND T5.MONTH_END_DATE <= R1.END_DATE 
  
) REM 
 
 
ON REM.CUSTOMER_ID = MAIN.CUSTOMER_ID 
AND REM.BILLING_GRP_ID = MAIN.BILLING_GRP_ID 
AND REM.MONTH_END_DATE = MAIN.MONTH_END_DATE   
  
),
CTE_COST_RE AS (
 
SELECT
  T6.SUPPLIER,
  T6.COST_GRP_ID,
  T6.MONTH_END_DATE,
   CASE WHEN T6.DUP_SUPPLIER_FLG = 1 THEN 0 ELSE T6.TOTAL_TRANS END AS TOTAL_TRANS,
  T6.SUPPLIER_TOTAL_TRANS,
  T6.SUPPLIER_TOTAL_COST,
  T6.CURRENCY AS COST_CURRENCY, 
  T6.COST_EXG_RATE,
  COALESCE(DLKP1.PCT_INVOICE_DISCOUNT, DLKP2.PCT_INVOICE_DISCOUNT) AS PCT_INVOICE_DISCOUNT,
  CASE
     WHEN
        COALESCE(DLKP1.PCT_INVOICE_DISCOUNT, DLKP2.PCT_INVOICE_DISCOUNT) IS NOT NULL 
     THEN
        T6.TOTAL_COST - (T6.TOTAL_COST*COALESCE(DLKP1.PCT_INVOICE_DISCOUNT, DLKP2.PCT_INVOICE_DISCOUNT)) 
     ELSE
        T6.TOTAL_COST 
  END
  AS TOTAL_COST , 
  
  CASE WHEN T6.TOTAL_TRANS != 0 THEN 
  
  (CASE
     WHEN
        COALESCE(DLKP1.PCT_INVOICE_DISCOUNT, DLKP2.PCT_INVOICE_DISCOUNT) IS NOT NULL 
     THEN
        (T6.TOTAL_COST - (T6.TOTAL_COST*COALESCE(DLKP1.PCT_INVOICE_DISCOUNT, DLKP2.PCT_INVOICE_DISCOUNT)))/T6.TOTAL_TRANS 
     ELSE
        T6.TOTAL_COST/T6.TOTAL_TRANS 
  END)
  
  WHEN T6.TOTAL_TRANS = 0 THEN 0 
  END
  AS COST_PER_QUERY,   
  
  (CASE
     WHEN
        COALESCE(DLKP1.PCT_INVOICE_DISCOUNT, DLKP2.PCT_INVOICE_DISCOUNT) IS NOT NULL 
     THEN
        (T6.TOTAL_COST - T6.TOTAL_COST*COALESCE(DLKP1.PCT_INVOICE_DISCOUNT, DLKP2.PCT_INVOICE_DISCOUNT))/T6.COST_EXG_RATE
     ELSE
        T6.TOTAL_COST/T6.COST_EXG_RATE
  END)
  
  AS TOTAL_COST_USD, 
  
  CASE WHEN T6.TOTAL_TRANS != 0 THEN 
  (CASE
     WHEN
        COALESCE(DLKP1.PCT_INVOICE_DISCOUNT, DLKP2.PCT_INVOICE_DISCOUNT) IS NOT NULL 
     THEN
        T6.TOTAL_COST - (T6.TOTAL_COST*COALESCE(DLKP1.PCT_INVOICE_DISCOUNT, DLKP2.PCT_INVOICE_DISCOUNT))/T6.COST_EXG_RATE
     ELSE
        T6.TOTAL_COST/T6.COST_EXG_RATE
  END)/T6.TOTAL_TRANS
  
  WHEN T6.TOTAL_TRANS = 0 THEN 0 
 END  AS COST_PER_QUERY_USD 
  
  
FROM
 (
    SELECT
       T5.SUPPLIER,
       T5.COST_GRP_ID,
       T5.MONTH_END_DATE,
       T5.TOTAL_TRANS,
       T5.TOTAL_COST,       
       SUM(T5.TOTAL_TRANS) OVER (PARTITION BY T5.SUPPLIER, T5.MONTH_END_DATE) AS SUPPLIER_TOTAL_TRANS,
       SUM(T5.TOTAL_COST) OVER (PARTITION BY T5.SUPPLIER, T5.MONTH_END_DATE) AS SUPPLIER_TOTAL_COST,
       T5.CURRENCY,
       T5.DUP_SUPPLIER_FLG,
       CASE WHEN CURRENCY = 'USD' THEN 1 ELSE EXG.PRICE_PER_USD END AS COST_EXG_RATE
    FROM
       (
       SELECT
          T4.SUPPLIER,
          T4.COST_GRP_ID,
          T4.MONTH_END_DATE,
          SUM(CASE WHEN DUP_SUPPLIER_FLG = 1 THEN 0 ELSE INCREMENTAL_VOLUME END) AS TOTAL_TRANS,
          SUM(T4.COST) AS TOTAL_COST,
          T4.CURRENCY,
          T4.DUP_SUPPLIER_FLG
FROM (   
  SELECT * FROM (
SELECT *, 
        CASE 
        WHEN TIERED_FLAG IS NULL THEN GRP_TOTAL_TRANS 
        WHEN TIERED_FLAG = 1 AND GRP_TOTAL_TRANS > TRANS_RANGE_MAX THEN TRANS_RANGE_MAX-TRANS_RANGE_MIN
        WHEN TIERED_FLAG = 1 AND GRP_TOTAL_TRANS <= TRANS_RANGE_MAX THEN GRP_TOTAL_TRANS-TRANS_RANGE_MIN+1
        END AS INCREMENTAL_VOLUME 
      , CASE 
        WHEN TIERED_FLAG IS NULL THEN GRP_TOTAL_TRANS*COST_PER_TRANS + FIXED_MONTHLY_COST 
        WHEN TIERED_FLAG = 1 AND GRP_TOTAL_TRANS > TRANS_RANGE_MAX THEN (TRANS_RANGE_MAX-TRANS_RANGE_MIN)*COST_PER_TRANS 
        WHEN TIERED_FLAG = 1 AND GRP_TOTAL_TRANS <= TRANS_RANGE_MAX THEN (GRP_TOTAL_TRANS-TRANS_RANGE_MIN+1)*COST_PER_TRANS+FIXED_MONTHLY_COST 
        END AS COST 
        
FROM (
SELECT *
      ,SUM(TOTAL_TRANS) OVER(PARTITION BY SUPPLIER, COST_GRP_ID) AS GRP_TOTAL_TRANS 
  
      FROM (
        SELECT SUPPLIER
                ,COST_GRP_ID
                ,DUP_SUPPLIER_FLG
                ,MONTH_END_DATE
                ,CG_START_DATE
                ,CG_END_DATE
                ,TRANS_RANGE_MIN
                ,TRANS_RANGE_MAX
                ,COST_PER_TRANS
                ,RE_START_DATE
                ,RE_END_DATE
               , FIXED_MONTHLY_COST
                , TIERED_FLAG
               ,CURRENCY
               ,EXTERNAL_SOURCE_ID
               ,ROWNUM
               ,SUM(TOTAL_TRANS_SUM) AS TOTAL_TRANS 
         FROM (
         SELECT * 
               ,CASE WHEN ROWNUM = 1 THEN TOTAL_TRANS ELSE 0 END AS TOTAL_TRANS_SUM 
                FROM
               (
                    SELECT
                       T2.SUPPLIER,
                       T2.COST_GRP_ID,
                       T2.DUP_SUPPLIER_FLG, 
                       T2.MONTH_END_DATE,
                       T2.CG_START_DATE,
                       T2.CG_END_DATE,
                       T2.TOTAL_TRANS,
                       T2.DATE,
                       COALESCE(RTG1.TRANS_RANGE_MIN, RTG2.TRANS_RANGE_MIN) AS TRANS_RANGE_MIN,
                       COALESCE(RTG1.TRANS_RANGE_MAX, RTG2.TRANS_RANGE_MAX) AS TRANS_RANGE_MAX,
                       COALESCE(RTG1.COST_PER_TRANS, RTG2.COST_PER_TRANS) AS COST_PER_TRANS,
                       COALESCE(RTG1.START_DATE, RTG2.START_DATE) AS RE_START_DATE,
                       COALESCE(RTG1.END_DATE, RTG2.END_DATE) AS RE_END_DATE,
                       COALESCE(RTG1.FIXED_MONTHLY_COST, RTG2.FIXED_MONTHLY_COST) AS FIXED_MONTHLY_COST,
                       COALESCE(RTG1.CURRENCY, RTG2.CURRENCY) AS CURRENCY,
                       RTG2.TIERED_FLAG AS TIERED_FLAG,
                       T2.EXTERNAL_SOURCE_ID,
                       ROW_NUMBER() OVER(PARTITION BY T2.SUPPLIER,
                       T2.COST_GRP_ID,
                       T2.DUP_SUPPLIER_FLG, 
                       T2.MONTH_END_DATE,
                       T2.CG_START_DATE,
                       T2.CG_END_DATE,
                       T2.TOTAL_TRANS, 
                       T2.DATE
                       ORDER BY COALESCE(RTG1.TRANS_RANGE_MIN, RTG2.TRANS_RANGE_MIN ))AS ROWNUM
                       
                       FROM
 
                          ( 
                             SELECT
                                 T1.MONTH_END_DATE,
                                 T1.SUPPLIER,
                                 T1.DUP_SUPPLIER_FLG, 
                                 T1.COST_GRP_ID,
                                 T1.DATE::DATE AS DATE,
                                 T1.CG_START_DATE::DATE AS CG_START_DATE,
                                 T1.CG_END_DATE::DATE AS CG_END_DATE,
                                 SUM(T1.TRANS_COUNT) AS TOTAL_TRANS,
                                 NULL AS EXTERNAL_SOURCE_ID 
                             
                                 FROM
                                     CTE_RE_INPUT T1
                        
                              WHERE T1.EXTERNAL_SOURCE_ID IS NULL 
                             
                              GROUP BY
                                 T1.SUPPLIER,
                                 T1.DUP_SUPPLIER_FLG,  
                                 T1.COST_GRP_ID,
                                 T1.MONTH_END_DATE,
                                 T1.DATE::DATE,
                                 T1.CG_START_DATE::DATE,
                                 T1.CG_END_DATE::DATE
                             
                              UNION ALL
                             
                              SELECT                  
                                 E2.MONTH_END_DATE,
                                 E2.SUPPLIER,
                                 E2.DUP_SUPPLIER_FLG, 
                                 E2.COST_GRP_ID,
                                 E2.DATE,
                                 E2.CG_START_DATE,
                                 E2.CG_END_DATE,
                                 SUM(E2.TRANS_COUNT) AS TOTAL_TRANS,
                                 E2.EXTERNAL_SOURCE_ID 
                              FROM
                                 (
                                    SELECT
                                       E1.SUPPLIER,
                                       E1.MONTH_END_DATE,
                                       E1.DATE::DATE AS DATE,
                                       E1.CG_START_DATE::DATE AS CG_START_DATE,
                                       E1.CG_END_DATE::DATE AS CG_END_DATE,
                                       E1.DUP_SUPPLIER_FLG, 
                                       ELKP.COST_GRP_ID,
                                       E1.ISO2_COUNTRY_CODE,
                                       E1.TRANS_COUNT,
                                       ELKP.EXTERNAL_SOURCE_ID 
                                    FROM
                                      CTE_RE_INPUT  E1
 
                                       INNER JOIN
                                          "NNGDS_REPORTING"."RATINGS_ENGINE_TPR"."SUPPLIER_EXTERNAL_SOURCE_LKP" ELKP 
                                          ON  E1.SUPPLIER = ELKP.SUPPLIER 
                                          AND E1.ISO2_COUNTRY_CODE = ELKP.SOURCE_COUNTRY_ISO2 
                                 )
                                 E2
                             
                              GROUP BY
                                 E2.SUPPLIER,
                                 E2.DUP_SUPPLIER_FLG, 
                                 E2.MONTH_END_DATE,
                                 E2.COST_GRP_ID,
                                 E2.DATE,
                                 E2.CG_START_DATE,
                                 E2.CG_END_DATE,
                                 E2.EXTERNAL_SOURCE_ID 
                           )
                           T2 
                           LEFT JOIN
                              "NNGDS_REPORTING"."RATINGS_ENGINE_TPR"."SUPPLIER_RATING_ENGINE" RTG1 
                              ON T2.SUPPLIER = RTG1.SUPPLIER 
                              AND T2.DATE >=  RTG1.START_DATE AND T2.DATE <= RTG1.END_DATE
                              AND T2.COST_GRP_ID = RTG1.COST_GRP_ID 
                              AND RTG1.TIERED_FLAG IS NULL 
                           LEFT JOIN
                              "NNGDS_REPORTING"."RATINGS_ENGINE_TPR"."SUPPLIER_RATING_ENGINE" RTG2 
                              ON T2.SUPPLIER = RTG2.SUPPLIER 
                              AND T2.DATE >=  RTG2.START_DATE AND T2.DATE <= RTG2.END_DATE
                              AND T2.COST_GRP_ID = RTG2.COST_GRP_ID 
                              AND RTG2.TIERED_FLAG IS NOT NULL 
       )
       )
           
       GROUP BY 
                 SUPPLIER
                ,COST_GRP_ID
                ,DUP_SUPPLIER_FLG
                ,MONTH_END_DATE
                ,CG_START_DATE
                ,CG_END_DATE
                ,TRANS_RANGE_MIN
                ,TRANS_RANGE_MAX
                ,COST_PER_TRANS
                ,RE_START_DATE
                ,RE_END_DATE
               , FIXED_MONTHLY_COST
               , TIERED_FLAG 
               , CURRENCY
               , EXTERNAL_SOURCE_ID
               , ROWNUM
        
      ) 
     
   )
   WHERE (TIERED_FLAG IS NULL AND GRP_TOTAL_TRANS >= TRANS_RANGE_MIN AND GRP_TOTAL_TRANS <= TRANS_RANGE_MAX) OR (TIERED_FLAG = 1 AND GRP_TOTAL_TRANS>TRANS_RANGE_MIN)
  
) 
) T4
 
        
         GROUP BY
            T4.SUPPLIER,
            T4.COST_GRP_ID,
            T4.MONTH_END_DATE,
            T4.CURRENCY,
          T4.DUP_SUPPLIER_FLG
   )
         T5
                
       LEFT JOIN "NNGDS_REPORTING"."RATINGS_ENGINE_TPR"."CURRENCY_EXCHANGE_LKP" EXG
       ON T5.CURRENCY = EXG.CURRENCY_CODE AND T5.MONTH_END_DATE = LAST_DAY(EXG.DATE)
   )
   T6
   
   LEFT JOIN
      "NNGDS_REPORTING"."RATINGS_ENGINE_TPR"."SUPPLIER_DISCOUNT_LKP" DLKP1 
      ON T6.SUPPLIER = DLKP1.SUPPLIER 
      AND T6.MONTH_END_DATE >= DLKP1.START_DATE AND T6.MONTH_END_DATE <= DLKP1.END_DATE
      AND DLKP1.DISCOUNT_UNIT = 'MONTHLY VOLUME' 
      AND T6.SUPPLIER_TOTAL_TRANS > DLKP1.DISCOUNT_RANGE_MIN 
      AND T6.SUPPLIER_TOTAL_TRANS <= DLKP1.DISCOUNT_RANGE_MAX 
   LEFT JOIN
      "NNGDS_REPORTING"."RATINGS_ENGINE_TPR"."SUPPLIER_DISCOUNT_LKP" DLKP2 
      ON T6.SUPPLIER = DLKP2.SUPPLIER 
      AND T6.MONTH_END_DATE >= DLKP2.START_DATE AND T6.MONTH_END_DATE <= DLKP2.END_DATE
      AND DLKP2.DISCOUNT_UNIT = 'MONTHLY FEES' 
      AND T6.SUPPLIER_TOTAL_COST > DLKP2.DISCOUNT_RANGE_MIN 
      AND T6.SUPPLIER_TOTAL_COST <= DLKP2.DISCOUNT_RANGE_MAX 
 
),
 CTE_CR AS (
   SELECT   COALESCE(T0.MONTH_END_DATE, RRE.MONTH_END_DATE) AS MONTH_END_DATE 
           ,COALESCE(T0.MONTH_END_DATE, RRE.MONTH_END_DATE) AS LATEST_DATE_IN_MONTH
           ,COALESCE(T0.CUSTOMER_ID, RRE.CUSTOMER_ID) AS CUSTOMER_ID 
           ,COALESCE(RRE.GROUP_CATEGORY, T0.GROUP_CATEGORY) AS GROUP_CATEGORY
           ,COALESCE(T0.BILLING_GRP_ID, RRE.BILLING_GRP_ID) AS BILLING_GRP_ID 
           ,COALESCE(T0.COST_GRP_ID, CRE.COST_GRP_ID) AS COST_GRP_ID 
           ,COALESCE(T0.SUPPLIER, CRE.SUPPLIER) AS SUPPLIER 
           ,COALESCE(T0.CUSTOMER_NAME_BILLING, CUST.CUSTOMER_NAME_BILLING) AS CUSTOMER_NAME_BILLING 
           ,T0.COUNTRY_NAME
           ,T0.COUNTRY_CODE
           ,T0.ISO2_COUNTRY_CODE
           ,CASE WHEN T0.DUP_SUPPLIER_FLG = 1 THEN 0 ELSE COALESCE(T0.TRANS_COUNT, RRE.TOTAL_TRANS) END AS TOTAL_TRANS
           ,T0.TDR_TYPE
           ,T0.OSR_TYPE
           ,T0.DUP_SUPPLIER_FLG 
           ,CASE    
                WHEN DUP_SUPPLIER_FLG = 1 OR COALESCE(T0.BILLING_GRP_ID, RRE.BILLING_GRP_ID) = -2 THEN 0 
                WHEN RRE.TOTAL_TRANS = 0 THEN NULL 
                ELSE RRE.BILLED_AMOUNT/RRE.TOTAL_TRANS
            END AS REV_PER_QUERY
           ,CASE    
                WHEN DUP_SUPPLIER_FLG = 1 OR COALESCE(T0.BILLING_GRP_ID, RRE.BILLING_GRP_ID) = -2 THEN 0 
                WHEN RRE.TOTAL_TRANS = 0 THEN NULL 
                ELSE RRE.BILLED_AMOUNT_USD/RRE.TOTAL_TRANS
            END AS REV_PER_QUERY_USD
           ,CASE 
                WHEN DUP_SUPPLIER_FLG = 1 OR  COALESCE(T0.BILLING_GRP_ID, RRE.BILLING_GRP_ID) = -2 THEN 0 
                WHEN RRE.TOTAL_TRANS = 0 THEN RRE.BILLED_AMOUNT 
                ELSE (RRE.BILLED_AMOUNT/RRE.TOTAL_TRANS)*T0.TRANS_COUNT
            END AS ESTIMATED_REVENUE
           ,CASE 
                WHEN DUP_SUPPLIER_FLG = 1 OR COALESCE(T0.BILLING_GRP_ID, RRE.BILLING_GRP_ID) = -2 THEN 0 
                WHEN RRE.TOTAL_TRANS = 0 THEN RRE.BILLED_AMOUNT_USD 
                ELSE (RRE.BILLED_AMOUNT_USD/RRE.TOTAL_TRANS)*T0.TRANS_COUNT
            END AS ESTIMATED_REVENUE_USD
           ,CRE.COST_PER_QUERY*T0.TRANS_COUNT AS ESTIMATED_COST
           ,CRE.COST_PER_QUERY_USD*T0.TRANS_COUNT  AS ESTIMATED_COST_USD
           ,CRE.COST_EXG_RATE
           ,RRE.REV_EXG_RATE
           ,CRE.COST_CURRENCY
           ,RRE.REV_CURRENCY
           ,T0.SERVICE_TYPE
           ,COALESCE(T0.ITEM, RRE.ITEM) AS ITEM
    FROM        
   (
 
      SELECT RRE0.CUSTOMER_ID                        
             ,RRE0.BILLING_GRP_ID                
             ,RRE0.GROUP_CATEGORY                
             ,RRE0.ITEM
             ,RRE0.COUNTRY_BREAKOUT        
             ,RRE0.MONTH_END_DATE                
             ,RRE0.TOTAL_TRANS                        
             ,RRE0.BILLED_AMOUNT                
             ,RRE0.BILLED_AMOUNT_USD        
             ,RRE0.REV_CURRENCY                
             ,CASE WHEN EXG.CURRENCY_CODE = 'USD' THEN 1 ELSE EXG.PRICE_PER_USD END AS REV_EXG_RATE 
             
       FROM   CTE_REV_RE RRE0
            
       LEFT JOIN "NNGDS_REPORTING"."RATINGS_ENGINE_TPR"."CURRENCY_EXCHANGE_LKP" EXG
        ON RRE0.REV_CURRENCY = EXG.CURRENCY_CODE AND 
           RRE0.MONTH_END_DATE = LAST_DAY(EXG.DATE)
       
       ) RRE 
       
       LEFT JOIN 
        (SELECT 
            CUSTOMER_ID                                                                
            ,CUSTOMER_NAME_BILLING                                        
            ,COUNTRY_NAME                                                        
            ,COUNTRY_CODE                                                        
            ,ISO2_COUNTRY_CODE                                                
            ,MONTH_END_DATE                                                        
            ,TDR_TYPE                                                                
            ,OSR_TYPE                                                                                                                                                                                
            ,GROUP_CATEGORY                
            ,ITEM
            ,SUM(TRANS_COUNT)AS TRANS_COUNT                                                
            ,BILLING_GRP_ID                                                        
            ,SUPPLIER                                                                
            ,SERVICE_TYPE                                                        
            ,DUP_SUPPLIER_FLG                                                
            ,COST_GRP_ID                                                        
 
        FROM CTE_RE_INPUT
        GROUP BY 
            CUSTOMER_ID                                                                
            ,CUSTOMER_NAME_BILLING                                        
            ,COUNTRY_NAME                                                        
            ,COUNTRY_CODE                                                        
            ,ISO2_COUNTRY_CODE                                                
            ,MONTH_END_DATE                                                        
            ,TDR_TYPE                                                                
            ,OSR_TYPE                                                                                                                                                                                
            ,GROUP_CATEGORY
            ,ITEM
            ,BILLING_GRP_ID                                                        
            ,SUPPLIER                                                                
            ,SERVICE_TYPE                                                        
            ,DUP_SUPPLIER_FLG                                                
            ,COST_GRP_ID                                                        
 
        ) T0
    
      ON T0.CUSTOMER_ID = RRE.CUSTOMER_ID AND 
         T0.BILLING_GRP_ID = RRE.BILLING_GRP_ID AND 
         T0.MONTH_END_DATE = RRE.MONTH_END_DATE 
    
    LEFT JOIN  CTE_COST_RE CRE
      ON T0.SUPPLIER = CRE.SUPPLIER AND T0.COST_GRP_ID = CRE.COST_GRP_ID AND T0.MONTH_END_DATE = CRE.MONTH_END_DATE 
   
    LEFT JOIN 
   ( SELECT DISTINCT CUSTOMER_ID, CUSTOMER_NAME_BILLING
    FROM RATINGS_ENGINE_TPR.CUSTOMER_MAPPING_LKP ) CUST 
    ON COALESCE(T0.CUSTOMER_ID, RRE.CUSTOMER_ID) = CUST.CUSTOMER_ID 
 
)
SELECT * FROM CTE_CR;
